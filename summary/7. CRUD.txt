CRUD - create, read, update, delete
Запускаем консоль Джанго. Рассмотрим 3 варианта добавления записей. Рассмотрим первый. Открываем терминал и вводим:
● cd my_site
● python manage.py shell     - сам запуск консоли
● from news.models import News    - для того, чтобы работать с моделью, нам нужно ее импортировать. Обращаем внимание
на регистр. Модель у нас принято называть в верхнем регистре.


==================================================================================================================
==================================================================================================================
==================================================================================================================
-------------------------------------------== CRUD. Create ==-----------------------------------------------------
● News(title='Новость 1', content='Контент новости 1')     - давайте попробуем записать данные в таблицу. Запись
модели создается вызовом ее конструктора и передачи в этот конструктор именованных параметров, соответствующих
атрибутам модели. Но, если мы сейчас откроем наши таблички, мы увидим, что данные еще не добавились. Мы их создали,
но еще не сохранили.

● news1 = _     - с помощью специальной переменной "_" мы сохраняем сохраняем результат впеременную news1. Все это
выражение расшифровывается как <news1 = последнему результату>

● news1     - попробуем вывести этот объект и видим <News: News object (None)>. None - это номер объекта, id (автоинкремент)
, которого еще у нас нет и его не будет до тех пор, пока мы не сохраним запись

● news1.title     - выводит 'Новость 1'

● news1.save()     - сохраняем запись
● news1.id     - выводит '1'

● from django.db import connection
● connection.queries     - так мы видим, как вставляются данные

● news1.pk     - обращаемся к primary key

● news2 = News(title='Новость 2', content='Контент новости 2')     - пробуем записать еще одну новость

● connection.queries     - так мы снова видим, как вставляются данные

● news2.save()     - сохраняем эту вторую запись

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Рассмотрим 2й вариант добавления записей:
● news3 = News()

● news3.title = 'Новость 3'

● news3.content = 'Контент новости 3'

● news3.save()

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Рассмотрим 3й вариант добавления записей:
● news4 = News.objects.create(title='Новость 4', content='Контент новости 4')     - в анном случае после нажатия Enter
запись будет автоматически сохранена. Нам не нужно будет набирать команду news4.save()

● news4.pk    - обращаемся к primary key и видим айдишник '4'

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Давайте посмотрим, как нам возвращается результат.
● News.objects.create(title='News 5', content='News 5 content')     - получаем <News: News object (5)>


==================================================================================================================
==================================================================================================================
==================================================================================================================
-------------------------------------------== CRUD. Read ==-----------------------------------------------------
Если мы вдруг закрыли консоль, то повторяем первые 3 команды из начала этого файла.
● cd my_site
● python manage.py shell
● from news.models import News

● News.objects.all()      - пробуем получить все записи из нашей модели News

● News.objects.order_by('title')      - пробуем получить все записи из нашей модели News, сортированнные по title

● News.objects.order_by('-title')      - то же самое, но в обратном порядке

● News.objects.exclude(title='News 5')      - все записи, кроме какой-то конкретной

● Заходим в <models.py> и прописываем функцию __str__, чтобы у нас выводилось строковое представление об объекте:
def __str__(self):
    return self.title

● exit()      - возвращаемся в консоль Джанго и обязательно совершаем выход. Нужно перезайти.

● from news.models import News
● News.objects.all()      - получаем QuerySet объект

● news = _
● news       - проверяем, все работает

● Далее в консоли итерируемся по этому объекту
for item in news:
    print(item.title, item.is_published)

● News.objects.create(title='News 5', content='News 6 content')     -  Попробуем вывести 2 новости с одинаковыми
заголовками. У нас уже есть новость, которая называется 'News 5'. Создадим еще одну такую же, но с другим контентом
(чтобы их как-то отличать). А потом попробуем вывести их вместе.
● News.objects.filter(title='News 5')

● News.objects.get(pk=5)      - с помощью метода get получаем конкретную запись
● News.objects.get(title='News 5')      - в данном случае мы получим ошибку, так как с таким title у нас более 1 записи.
Так что выводить информацию нужно только с индексируемым (уникальным) ключом, например (pk=5)


==================================================================================================================
==================================================================================================================
==================================================================================================================
-------------------------------------------== CRUD. Update ==-----------------------------------------------------
Для того, чтобы обновить запись, сначала ее нужно получить.
● News.objects.get(pk=4)
● news4 = _
● news4

● news4.title = 'Новость_обновлённая_4'      - обновляем
● news4.save()      - сохраняем
● News.objects.get(pk=4)      - проверяем


==================================================================================================================
==================================================================================================================
==================================================================================================================
-------------------------------------------== CRUD. Delete ==-----------------------------------------------------
Для того, чтобы удалить запись, сначала ее нужно получить.
● news3 = News.objects.get(pk=3)
● news3.delete()
